#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script l√†m s·∫°ch file d·ªãch - ch·ªâ gi·ªØ t√™n ch∆∞∆°ng v√† n·ªôi dung ti·∫øng Vi·ªát
"""

import os
import re
from pathlib import Path

def clean_chapter_file(file_path):
    """L√†m s·∫°ch m·ªôt file ch∆∞∆°ng"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # T√¨m ph·∫ßn ti√™u ƒë·ªÅ ch∆∞∆°ng
        chapter_title_match = re.search(r'=== (CH∆Ø∆†NG \d+) ===', content)
        chapter_title = chapter_title_match.group(1) if chapter_title_match else "CH∆Ø∆†NG"
        
        # T√¨m ph·∫ßn d·ªãch ti·∫øng Vi·ªát
        vietnamese_section = re.search(r'--- TI·∫æNG VI·ªÜT D·ªäCH ---\n(.*?)(?=\n--- TH√îNG TIN ---|\Z)', content, re.DOTALL)
        
        if vietnamese_section:
            vietnamese_content = vietnamese_section.group(1).strip()
            
            # T·∫°o n·ªôi dung s·∫°ch
            clean_content = f"{chapter_title}\n\n{vietnamese_content}"
            
            return clean_content
        else:
            return f"{chapter_title}\n\n[Kh√¥ng t√¨m th·∫•y n·ªôi dung d·ªãch]"
            
    except Exception as e:
        return f"[L·ªói x·ª≠ l√Ω file: {e}]"

def clean_all_translations(input_dir, output_dir):
    """L√†m s·∫°ch t·∫•t c·∫£ file d·ªãch"""
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    
    # T·∫°o th∆∞ m·ª•c output
    output_path.mkdir(exist_ok=True)
    
    # T√¨m t·∫•t c·∫£ file ch∆∞∆°ng
    chapter_files = sorted(input_path.glob("chapter_*.txt"))
    
    if not chapter_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file ch∆∞∆°ng n√†o")
        return
    
    print(f"üßπ L√†m s·∫°ch {len(chapter_files)} file ch∆∞∆°ng...")
    
    cleaned_count = 0
    
    for chapter_file in chapter_files:
        print(f"üîÑ X·ª≠ l√Ω: {chapter_file.name}")
        
        # L√†m s·∫°ch n·ªôi dung
        clean_content = clean_chapter_file(chapter_file)
        
        # L∆∞u file s·∫°ch
        clean_file_path = output_path / f"clean_{chapter_file.name}"
        
        with open(clean_file_path, 'w', encoding='utf-8') as f:
            f.write(clean_content)
        
        cleaned_count += 1
        print(f"‚úÖ ƒê√£ l√†m s·∫°ch: {clean_file_path.name}")
    
    # T·∫°o file t·ªïng h·ª£p
    print(f"\nüìù T·∫°o file t·ªïng h·ª£p...")
    combined_file = output_path / "novel_combined_clean.txt"
    
    with open(combined_file, 'w', encoding='utf-8') as f:
        f.write("T√äN TRUY·ªÜN: Si√™u C·∫•p Nh√† M√°y H·ªá Th·ªëng\n")
        f.write("=" * 50 + "\n\n")
        
        for chapter_file in chapter_files:
            clean_content = clean_chapter_file(chapter_file)
            f.write(clean_content)
            f.write("\n\n" + "=" * 50 + "\n\n")
    
    print(f"‚úÖ ƒê√£ t·∫°o file t·ªïng h·ª£p: {combined_file}")
    print(f"\nüéâ Ho√†n th√†nh l√†m s·∫°ch {cleaned_count} ch∆∞∆°ng!")
    print(f"üìÅ K·∫øt qu·∫£ l∆∞u t·∫°i: {output_dir}")

def main():
    """Ch·∫°y l√†m s·∫°ch"""
    print("üßπ L√ÄNG S·∫†CH FILE D·ªäCH")
    print("=" * 50)
    
    # Th∆∞ m·ª•c input v√† output
    input_dir = "data/translated_full"
    output_dir = "data/clean_translation"
    
    if not os.path.exists(input_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {input_dir}")
        return
    
    # Ki·ªÉm tra s·ªë l∆∞·ª£ng file
    chapter_files = list(Path(input_dir).glob("chapter_*.txt"))
    print(f"üìö T√¨m th·∫•y: {len(chapter_files)} file ch∆∞∆°ng")
    
    if len(chapter_files) == 0:
        print("‚ùå Kh√¥ng c√≥ file ch∆∞∆°ng n√†o ƒë·ªÉ x·ª≠ l√Ω")
        return
    
    # Preview 1 file ƒë·∫ßu
    if chapter_files:
        print(f"\nüîç PREVIEW FILE ƒê·∫¶U:")
        print("-" * 30)
        preview_content = clean_chapter_file(chapter_files[0])
        print(preview_content[:200] + "..." if len(preview_content) > 200 else preview_content)
    
    # H·ªèi x√°c nh·∫≠n
    confirm = input(f"\n‚ùì B·∫°n c√≥ mu·ªën l√†m s·∫°ch {len(chapter_files)} file kh√¥ng? (y/N): ").lower()
    
    if confirm != 'y':
        print("‚ùå H·ªßy b·ªè")
        return
    
    # Th·ª±c hi·ªán l√†m s·∫°ch
    clean_all_translations(input_dir, output_dir)

if __name__ == "__main__":
    main()
