1. 添加HEIC支持
2. HEIC format support enabled
3. pillow-heif not installed, HEIC format may not display properly
4. 番茄小说下载器 - 现代版
5. 1200x800
6. 设置主题色彩
7. primary
8. 1976D2',      # 主色调 - 蓝色
9. primary_dark
10. 1565C0', # 深蓝色
11. secondary
12. FF5722',    # 次要色 - 橙色
13. success
14. 4CAF50',      # 成功色 - 绿色
15. warning
16. FF9800',      # 警告色 - 橙色
17. error
18. F44336',        # 错误色 - 红色
19. background
20. FAFAFA',   # 背景色
21. surface
22. FFFFFF',      # 表面色
23. text_primary
24. 212121', # 主要文本
25. text_secondary
26. 757575', # 次要文本
27. border
28. E0E0E0'        # 边框色
29. 下载状态
30. 延迟初始化，避免阻塞界面
31. 存储搜索结果数据
32. 存储封面图片，防止被垃圾回收
33. 初始化版本信息和自动更新
34. 清理可能残留的更新备份文件
35. 配置文件路径
36. config.json
37. 加载配置
38. 设置字体
39. 创建样式
40. 创建UI
41. 检查已有的验证状态
42. 检查上次更新状态
43. 启动时自动检查更新（仅官方构建）
44. auto_check_update
45. GUI初始化完成后获取API列表（延迟执行，确保GUI已完全显示）
46. 在GUI启动完成后要求验证码验证并获取API
47. title
48. 微软雅黑
49. bold
50. subtitle
51. body
52. button
53. small
54. 设置ttk样式
55. 配置Notebook样式
56. Modern.TNotebook
57. Modern.TNotebook.Tab
58. 配置Frame样式
59. Card.TFrame
60. flat
61. 配置Progressbar样式
62. Modern.Horizontal.TProgressbar
63. 创建界面组件
64. 主容器
65. 标题栏
66. 主内容区域 - 使用标签页
67. 创建标题栏
68. 标题
69. 🍅 番茄小说下载器
70. white
71. 副标题
72. 现代化界面 | 高效下载 | 多格式支持
73. 创建主内容区域
74. 创建标签页
75. 搜索标签页暂时隐藏（搜索接口失效）
76. 下载标签页
77. 💾 下载管理
78. 设置标签页
79. ⚙️ 设置
80. 创建通用卡片容器，带标题栏和内边距，返回内容容器
81. 内容容器
82. 创建统一风格按钮
83. hand2
84. 创建下载标签页
85. 下载设置卡片
86. 💾 下载设置
87. 书籍ID输入
88. 书籍ID:
89. 保存路径
90. 保存路径:
91. 使用配置中的保存路径
92. save_path
93. 📁 浏览
94. 格式选择
95. 文件格式:
96. file_format
97. txt
98. w
99. 监听变化并保存
100. TXT
101. EPUB
102. epub
103. 移除章节下载模式选择，只保留整本下载
104. 下载按钮
105. 🚀 开始下载
106. 🧹 清理设置
107. 进度卡片
108. 📈 下载进度
109. 进度条
110. determinate
111. 进度信息
112. 准备就绪
113. 状态标签
114. 日志卡片
115. 📜 下载日志
116. 日志文本框
117. 创建设置标签页
118. 验证设置卡片
119. 🔒 人机验证
120. 验证状态显示
121. 状态: 检查中...
122. 立即更新验证状态
123. 验证按钮
124. 🔒 手动验证
125. 🧹 清除验证
126. API管理按钮
127. 🔧 API管理
128. 版本信息卡片
129. 📦 版本信息
130. 当前版本信息与更新操作
131. 当前版本: {self.current_version}
132. 自动检查更新开关（源码/非官方构建禁用）
133. 启动时自动检查更新
134. official_build
135. 前往发布页按钮
136. https://github.com/{__github_repo__}/releases/latest
137. 🌐 发布页
138. 检查更新按钮（源码/非官方构建跳转到Releases页面）
139. 🔄 检查更新
140. 关于信息卡片
141. ℹ️ 关于
142. nw
143. 加载配置文件
144. r
145. utf-8
146. 返回默认配置
147. download_mode
148. full
149. 加载配置失败: {e}
150. 保存配置文件
151. save_path_entry
152. format_var
153. 固定为整本下载
154. auto_update_var
155. 配置已保存到: {self.config_file}
156. 保存配置失败: {e}
157. ========== 事件处理方法 ==========
158. 搜索小说
159. 警告
160. 请输入搜索关键词
161. 清空之前的结果
162. 清空封面图片缓存
163. 显示搜索中提示
164. 🔍 搜索中，请稍候...
165. 在新线程中执行搜索
166. 判断是否为小说内容，过滤掉听书、漫画等
167. 检查来源，过滤听书工作室
168. source
169. 畅听工作室
170. 有声
171. 听书
172. 检查作者字段，如果包含"主播"关键词，很可能是听书
173. author
174. 主播
175. 播音
176. 朗读
177. 检查字数，听书通常word_number为0或很小
178. word_number
179. 0
180. 但要排除一些特殊情况，如果是正在连载的小说
181. creation_status
182. 1
183. serial_count
184. 连载中且章节数较多，可能是小说
185. 检查书籍类型字段
186. book_type
187. is_ebook
188. book_type为"1"的是听书，"0"是小说
189. is_ebook为"0"的是听书，"1"是电子书/小说
190. 检查分类，排除明确的非小说分类
191. category
192. 有声书
193. 漫画
194. 连环画
195. 绘本
196. 音频
197. 检查sub_info字段，听书通常显示"章"而不是"人在读"
198. sub_info
199. 章
200. 人在读
201. 这可能是听书，进一步检查
202. 其余情况认为是小说
203. 搜索小说线程函数
204. 搜索中...
205. 确保API已初始化
206. data
207. 从搜索结果中提取书籍数据
208. 检查新的数据结构 - API返回的是简化格式
209. items
210. 直接处理items列表中的书籍数据
211. book_name
212. book_id
213. 检查旧的数据结构（兼容性处理）
214. search_tabs
215. 只处理小说相关的标签页，过滤掉听书等其他类型
216. tab_type
217. tab_type=1 通常是综合/小说，过滤掉听书(tab_type=2)等其他类型
218. book_data
219. 过滤小说内容，排除听书、漫画等其他类型
220. 在主线程中更新UI
221. 搜索失败
222. 未找到相关小说
223. 搜索失败或未返回有效结果
224. 搜索失败: {str(e)}
225. 🔍 搜索
226. 更新搜索结果显示
227. 为每本小说创建卡片
228. 创建小说卡片
229. 主卡片框架
230. 内容框架
231. 左侧：封面图片
232. 创建封面占位符
233. 📚\n加载中...
234. f0f0f0',
235. 异步加载封面
236. thumb_url
237. expand_thumb_url
238. audio_thumb_url_hd
239. 尝试加载封面: {novel.get(
240. 尝试加载封面: {novel.get('book_name', '未知')} - URL: {cover_url}
241. 未知
242. 调试：显示所有可能的封面URL
243. 所有封面URL选项: {debug_urls}
244. 调试：检查PIL导入状态
245. PIL版本: {PIL.__version__}, Image模块: {Image}, ImageTk模块: {ImageTk}
246. PIL导入失败: {e}
247. 开始下载封面: {cover_url}
248. 封面下载成功: {novel.get(
249. 封面下载成功: {novel.get('book_name', '未知')}
250. 主封面下载失败，尝试备用URL
251. 如果主封面加载失败，尝试其他封面URL
252. horiz_thumb_url
253. 尝试备用封面URL: {alt_url}
254. 备用封面下载成功
255. 所有封面都加载失败，显示默认图标
256. 所有封面URL都加载失败
257. 📚\n暂无封面
258. f0f0f0'))
259. 封面加载异常: {e}
260. 📚\n加载失败
261. 没有找到封面URL: {novel.get(
262. 没有找到封面URL: {novel.get('book_name', '未知')}
263. f0f0f0')
264. 右侧：详细信息
265. 书名（大标题）
266. 基本信息行
267. 作者
268. 作者：{novel.get(
269. 作者：{novel.get('author', '未知')}
270. 状态
271. 修复状态显示：creation_status为'0'表示完结，'1'表示连载中
272. 完结
273. 连载中
274.   •  {status_text}
275. 分类
276.   •  {novel.get(
277.   •  {novel.get('category', '未知')}
278. 统计信息行
279. 字数
280. {word_count // 10000}万字
281. {word_count}字
282. 📖 {word_display}
283. 评分
284. score
285. ⭐ {float(score):.1f}分
286. ⭐ 无评分
287. 阅读人数
288. read_cnt_text
289. read_count
290. {count // 10000}万人在读
291. {count}人在读
292. 👥 {read_cnt_text}
293. 简介
294. abstract
295. book_abstract_v2
296. 无简介
297. 操作按钮
298. 💾 下载此书
299. 标签信息（如果有）
300. tags
301. 最多显示5个标签
302. 更新封面标签
303. 检查标签是否还存在
304. 将图片存储到全局缓存中，防止被垃圾回收
305. 更新标签显示图片，移除文本
306. 设置标签的图片引用
307. 封面更新成功，书籍ID: {book_id}
308. 标签已被销毁，无法更新封面
309. 更新封面标签失败: {e}
310. 📚\n显示失败
311. 下载选中的小说
312. 切换到下载标签页并填入ID
313. 选择下载标签页
314. 成功
315. 已选择《{novel.get(
316. 已选择《{novel.get('book_name', '未知')}》用于下载
317. 错误
318. 无法获取书籍ID
319. 下载并调整图片大小
320. === 开始下载图片 ===
321. 原始URL: {url}
322. 目标尺寸: {size}
323. URL为空，返回None
324. 调试：检查当前PIL模块状态
325. PIL模块检查通过
326. CRITICAL: PIL模块导入失败: {e}
327. 基于测试结果优化URL尝试顺序
328. .heic
329. HEIC格式成功率最高，优先使用原始HEIC URL
330. 只在HEIC失败时尝试JPG（JPG偶尔会成功）
331. .jpg
332. .HEIC
333. 跳过WebP和PNG，因为测试显示它们都返回403
334. 对于非HEIC格式，直接使用原URL
335. 尝试加载封面: {len(urls_to_try)}个优化URL
336. 添加请求头，模拟浏览器访问
337. User-Agent
338. Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36
339. Referer
340. https://www.tomatonovel.com/
341. Accept
342. image/webp,image/apng,image/jpeg,image/png,image/*,*/*;q=0.8
343. Accept-Language
344. zh-CN,zh;q=0.9,en;q=0.8
345. Cache-Control
346. no-cache
347. 尝试URL {i+1}/{len(urls_to_try)}: {test_url[:100]}...
348. 检查响应内容类型
349. content-type
350. 响应: {content_type}, 大小: {content_length} bytes
351. image/
352. 无效的图片响应，跳过
353. 尝试打开图片
354. 转换图片模式
355. RGBA
356. 创建白色背景
357. RGB
358. L
359. 调整大小
360. 封面加载成功！
361. PIL处理失败: {img_error}
362. 请求失败: {req_error}
363. URL处理失败: {e}
364. 所有URL都失败了
365. 图片下载完全失败: {e}
366. 显示书籍详情
367. 请选择一本小说
368. 获取选中的索引
369. 在新线程中获取详情
370. 显示书籍详情线程函数
371. 获取书籍详情失败: {str(e)}
372. 创建详情窗口
373. 书籍详情
374. 1000x800
375. 创建主框架
376. 获取选中的小说信息
377. 未找到选中的小说信息
378. 创建上部分：封面和基本信息
379. 下载并显示封面
380. 在新线程中下载图片
381. 先显示加载中
382. 封面加载中...
383. 右侧：基本信息
384. 基本信息
385. {float(score):.1f}分
386. 无评分
387. 无
388. 下部分：完整简介
389. 📖 作品简介
390. 创建文本框显示完整简介
391. 插入完整简介
392. 暂无简介
393. 底部按钮
394. ❌ 关闭
395. 显示封面图片
396. 清空父容器
397. 保持引用
398. 显示无封面占位符
399. 从详情窗口下载书籍
400. 显示标签和关键词
401. role
402. 🏷️ 标签信息
403. 主要角色：{selected_novel.get(
404. 主要角色：{selected_novel.get('role')}\n
405. 标签：{selected_novel.get(
406. 标签：{selected_novel.get('tags')}
407. 绑定鼠标滚轮事件
408. units
409. <MouseWheel>
410. 创建详情卡片
411. 格式化字数显示
412. 格式化评分显示
413. {float(score)/10:.1f}分
414. 选择保存路径
415. 自动保存配置
416. 记录日志
417. [%H:%M:%S] 
418. \n
419. 格式化时间显示
420. {int(seconds)}秒
421. {int(seconds // 60)}分{int(seconds % 60)}秒
422. {int(hours)}时{int(minutes)}分{int(secs)}秒
423. 进度回调
424. 更新进度条
425. value
426. 计算剩余时间
427. 进度: {progress}% (预计剩余时间: {remaining_str})
428. 下载完成! 总耗时: {elapsed_str}
429. 进度: {progress}%
430. 处理中...
431. 更新状态标签
432. 检测下载完成消息，自动清理chapter.json文件
433. 下载完成
434. 失败
435. 只有在非递归情况下才记录日志，避免递归调用
436. _in_progress_callback
437. 只记录重要消息，避免过多日志
438. 完成
439. {message}
440. 使用update_idletasks避免递归
441. 静默处理异常，避免递归错误
442. 自动清理chapter.json文件
443. chapter.json
444. 已自动清理下载状态文件: chapter.json
445. 静默处理，避免影响用户体验
446. 清理设置文件
447. 清理GUI配置文件
448. gui_config.json
449. downloader_state.json
450. 清理成功
451. 已清理文件: {
452. 已清理文件: {', '.join(cleared_files)}
453. 清理设置文件: {
454. 清理设置文件: {', '.join(cleared_files)}
455. 清理结果
456. 没有找到需要清理的设置文件
457. 清理设置文件失败: {str(e)}
458. 开始下载
459. 请输入书籍ID
460. 保存路径无效
461. 下载中...
462. 准备开始下载...
463. 开始下载书籍: {book_id}
464. 在新线程中执行下载
465. 下载线程函数 - 完全集成enhanced_downloader.py的高速下载功能
466. 检查API接口是否已经获取
467. api_endpoints
468. API列表为空，可能验证失败或未验证
469. API未验证
470. API接口列表为空，可能启动时验证失败。\n\n
471. 请重新启动程序并完成验证码验证，\n
472. 或在设置中手动进行验证。
473. 确保API实例存在
474. API实例不存在，正在重新创建...
475. 设置进度回调
476. GUI进度回调，将下载器的回调转发到GUI
477. 只有有效进度才更新
478. 只更新消息，不改变进度
479. 设置API的进度回调
480. 初始化增强型下载器（集成enhanced_downloader.py功能）...
481. 获取书籍信息
482. isSuccess
483. errorMsg
484. 未知错误
485. 无响应
486. 获取书籍信息失败: {error_msg}
487. 检查API返回的消息
488. message
489. BOOK_REMOVE
490. 书籍 {book_id} 已被移除或不存在
491. 获取书名
492. 未知作者
493. 无法获取书籍 {book_id} 的详细信息
494. 准备使用enhanced_downloader.py的高速下载《{book_name}》...
495. 整本下载 - 直接使用增强型下载器（移除章节下载模式）
496. 启动enhanced_downloader.py高速下载模式...
497. 直接使用增强型下载器的run_download方法
498. 在线程中运行下载，传递GUI验证回调
499. 检查是否取消
500. 下载已取消
501. 完成消息由下载器内部处理，不需要在这里重复发送
502. 下载失败: {error_msg}
503. 清理进度回调
504. set_progress_callback
505. 过滤章节内容中的水印
506. 常见的水印模式
507. 兔兔
508. 【兔兔】
509. （兔兔）
510. tutuxka
511. TUTUXKA
512. 兔小说
513. 兔读
514. 兔书
515. 可以根据需要添加更多水印模式
516. 过滤末尾的水印
517. 过滤行末的水印
518. 只保留非空行
519. 保存为TXT格式，包含详细信息
520. =
521. \n\n
522. content
523. 过滤章节末尾的"兔兔"水印
524. \n\n{title}\n\n{text_content}
525. 保存为EPUB格式，包含封面和详细信息
526. 创建EPUB书籍
527. 设置书籍元数据
528. 未知书名
529.  - {subtitle}
530. unknown
531. zh-cn
532. 添加描述
533. DC
534. description
535. 添加封面
536. Microsoft YaHei
537. SimSun
538. 333; border-bottom: 2px solid #ccc; padding-bottom: 10px; }
539. 555; margin-top: 30px; }
540. f9f9f9; padding: 15px; border-left: 4px solid #4CAF50; margin: 20px 0; }
541. 2c3e50; border-bottom: 1px solid #eee; padding-bottom: 5px; }
542. nav
543. style/nav.css
544. text/css
545. 创建书籍信息页面
546. stylesheet
547. book-info
548. 书籍信息
549. info.xhtml
550. 添加章节
551. info
552. 第{i+1}章
553. 将换行转换为HTML段落
554. <p>{para}</p>\n
555. chapter
556. chapter-title
557. chapter_{i+1}.xhtml
558. chapter_{i+1}
559. 设置目录和spine
560. 添加导航文件
561. 保存EPUB文件
562. 为EPUB添加封面
563. Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
564. image/webp,image/apng,image/*,*/*;q=0.8
565. 检查是否是图片
566. 确定文件扩展名
567. jpeg
568. jpg
569. png
570. webp
571. heic
572. EPUB不支持heic格式，转换为jpg
573. 检测到HEIC格式封面，转换为JPG格式
574. 默认
575. cover.{ext}
576. 成功添加封面 (格式: {ext})
577. 添加封面失败: {e}
578. 生成书籍信息文本
579. 书名：{book_data.get(
580. 书名：{book_data.get('book_name', '未知')}
581. 作者：{book_data.get(
582. 作者：{book_data.get('author', '未知')}
583. 状态：{status_text}
584. 分类：{book_data.get(
585. 分类：{book_data.get('category', '未知')}
586. 字数：{word_display}
587. 评分：{score_display}
588. 来源：{book_data.get(
589. 来源：{book_data.get('source', '未知')}
590. 标签：{tags}
591. \n简介：\n{description}
592. 生成书籍信息HTML
593. <p><strong>书名：</strong>{book_data.get(
594. <p><strong>书名：</strong>{book_data.get('book_name', '未知')}</p>
595. <p><strong>作者：</strong>{book_data.get(
596. <p><strong>作者：</strong>{book_data.get('author', '未知')}</p>
597. <p><strong>状态：</strong>{status_text}</p>
598. <p><strong>分类：</strong>{book_data.get(
599. <p><strong>分类：</strong>{book_data.get('category', '未知')}</p>
600. <p><strong>字数：</strong>{word_display}</p>
601. <p><strong>评分：</strong>{score_display}</p>
602. <p><strong>来源：</strong>{book_data.get(
603. <p><strong>来源：</strong>{book_data.get('source', '未知')}</p>
604. <p><strong>标签：</strong>{tags}</p>
605. <p>{para}</p>
606. <div><strong>简介：</strong><br/>{desc_html}</div>
607. 下载完成后的清理工作
608. 确保下载完成后清理状态文件
609. 初始化API，只在需要时调用
610. 创建GUI验证码处理回调
611. 在GUI中处理验证码输入
612. token
613. 使对话框成为模态窗口并等待
614. 创建API实例，传入GUI回调
615. 注意：不在这里调用预加载，避免重复触发验证
616. 在启动时要求验证码验证并获取API列表
617. 程序启动完成，准备进行API验证...
618. 先检查是否有保存的API
619. 有保存的API，询问用户选择
620. 没有保存的API，进行网络验证
621. 启动验证失败: {str(e)}
622. 启动错误
623. 显示API选择对话框
624. API选择
625. 500x400
626. 居中显示
627. +%d+%d
628. choice
629. 发现保存的API配置
630. API信息显示
631. last_update
632. api_count
633. batch_enabled
634. 启用
635. 禁用
636. 按钮框架
637. use_saved
638. update
639. clear_and_update
640. 使用保存的API
641. 更新API
642. 清除并更新
643. 清除并重新获取
644. 等待用户选择
645. 处理用户选择
646. 用户选择使用保存的API
647. 已应用保存的API配置
648. 用户选择更新API
649. 用户选择清除并重新获取API
650. 用户取消选择，使用保存的API
651. 执行网络验证
652. 先检查网络连接
653. 检查网络连接...
654. https://www.baidu.com
655. 网络连接正常
656. 网络连接异常，状态码: {test_response.status_code}
657. 网络连接测试失败: {str(net_e)}
658. 网络连接问题
659. 网络连接测试失败: {str(net_e)}\n\n
660. 请检查网络连接后重启程序。
661. 显示欢迎信息和验证要求
662. 欢迎使用番茄小说下载器！\n\n
663. 为了正常使用下载功能，需要先进行人机验证。\n
664. 验证成功后，API接口将保存到内存中供下载使用。\n\n
665. 点击确定开始验证
666. 提供跳过选项
667. 验证码验证
668. 400x300
669. 欢迎使用番茄小说下载器！
670. 说明文本
671. 为了正常使用下载功能，建议先进行人机验证。\n
672. 如果当前网络环境无法连接验证服务器，\n
673. 您也可以选择跳过验证，稍后在设置中手动验证。
674. verify
675. skip
676. cancel
677. 🔒 开始验证
678. ⏭️ 跳过验证
679. ❌ 取消
680. 用户取消启动
681. 用户跳过验证
682. 验证已跳过
683. 已跳过启动验证。\n\n
684. 如需下载功能，请稍后在设置中手动进行验证。
685. user_choice == "verify" 继续验证流程
686. 确保API实例已创建
687. 创建API实例...
688. API实例创建失败
689. 初始化失败
690. 无法创建API实例，请检查网络连接后重启程序。
691. 强制进行API初始化（这会触发验证码验证）
692. 开始验证码验证流程...
693. 正在连接服务器获取验证码挑战...
694. 验证码验证成功！API接口已保存到内存
695. 验证成功
696. 验证码验证成功！\n已获取{api_count}个API接口并保存到内存。\n现在可以正常使用下载功能了。
697. 验证码验证失败
698. 验证失败
699. 验证码验证失败。可能的原因：\n
700. 1. 网络连接不稳定\n
701. 2. 服务器暂时无法访问\n
702. 3. 验证码输入错误或过期\n\n
703. 解决方案：\n
704. • 检查网络连接后重启程序重试\n
705. • 在设置中手动进行验证\n
706. • 联系开发者获取帮助
707. 启动验证异常: {error_msg}
708. 启动验证错误
709. 启动时验证过程出现异常：\n{error_msg}\n\n
710. • 重启程序重试\n
711. • 检查网络连接和防火墙设置
712. 保留原方法以保持兼容性（已弃用，现在使用_require_captcha_verification_at_startup）
713. 保留原方法以保持兼容性，现在调用新的方法
714. 检查API错误并提供解决方案
715. 检查错误消息中是否包含验证相关的关键词
716. 403
717. FORBIDDEN
718. UNAUTHORIZED
719. 401
720. 验证
721. captcha
722. verification
723. 显示验证码解决方案对话框
724. 显示一般错误对话框
725. 操作失败
726. 操作失败：{error_message}\n\n如果持续出现问题，可能需要进行验证。
727. 显示验证解决方案对话框
728. 需要验证
729. 操作失败，可能需要进行人机验证：\n\n{error_message}\n\n是否现在进行验证？
730. 显示验证码对话框
731. {base_url}/api/get-captcha-challenge
732. 获取验证码URL
733. X-Auth-Token
734. Content-Type
735. application/json
736. 与网络层保持一致，关闭SSL验证，避免部分环境证书校验失败
737. challenge_url
738. 回退到固定URL，确保总能显示输入框
739. https://dlbkltos.s7123.xyz:5080/captcha
740. 端口补全
741. dlbkltos.s7123.xyz
742. :5080
743. dlbkltos.s7123.xyz:5080
744. 验证码获取失败
745. 获取验证码时出错: {str(e)}
746. 为API初始化创建验证码对话框
747. API初始化需要验证
748. 600x450
749. 600x450+{x}+{y}
750. 🔒 API需要验证
751. 打开验证页面
752. 验证URL按钮
753. 强制使用固定的验证页面URL
754. 🌐 打开验证页面
755. 使用更健壮的复制链接（优先服务端返回，其次固定URL，并补全端口）
756. 📋 复制验证链接
757. 验证令牌输入
758. 验证令牌:
759. 保存token到环境变量（仅本次会话有效）
760. TOMATO_VERIFICATION_TOKEN
761. 在销毁对话框之前弹出提示，并以根窗口为父级，避免已销毁窗口作为父级导致的错误
762. 🎉 验证令牌已保存，API初始化继续...
763. 提示
764. 请输入验证令牌
765. 空令牌表示跳过
766. ✅ 确认验证
767. 绑定回车键
768. <Return>
769. 窗口关闭处理
770. None表示取消
771. WM_DELETE_WINDOW
772. 设置焦点
773. 创建验证码对话框（用于手动验证）
774. 🔒 需要人机验证
775. 设置对话框为模态
776. +{x}+{y}
777. 🔒 安全验证
778. 内容区域
779. 确认
780. 复制URL按钮
781. 按钮区域
782. 输入错误
783. 保存验证令牌到环境变量（仅本次会话有效）
784. 测试验证令牌是否有效
785. 跳过验证
786. 跳过验证可能导致部分功能无法使用。\n\n确定要跳过验证吗？
787. 回车键确认
788. 复制文本到剪贴板
789. 复制成功
790. 验证链接已复制到剪贴板
791. 复制失败
792. 无法复制到剪贴板: {str(e)}
793. X-Verification-Token
794. 测试API访问
795. 验证错误
796. 验证过程中出错: {str(e)}
797. 🎉 人机验证通过！现在可以正常使用所有功能。
798. 验证成功后初始化API
799. 更新状态显示
800. 已验证 ✓
801. 验证令牌无效或已过期，请重新获取。
802. 手动进行验证并获取API接口
803. 提示用户即将进行验证
804. 手动验证
805. 即将进行验证码验证并获取API接口。\n\n是否继续？
806. question
807. yes
808. 无法创建API实例
809. 强制重新获取API接口
810. 清空现有接口
811. 进行验证和API获取
812. 正在验证...
813. 验证成功，更新状态
814. 验证成功 ✓ (已获取{api_count}个API接口)
815. 验证码验证成功！\n已获取{api_count}个API接口。\n现在可以正常使用下载功能了。
816. 验证码验证失败，请重试。
817. 验证异常
818. 验证过程出现异常：{error_msg}
819. 清除验证令牌和API接口
820. 清除验证
821. 确定要清除验证令牌和API接口吗？\n清除后需要重新验证才能下载。
822. 清除环境变量中的验证令牌
823. 清除内存中的API接口
824. 已清除验证令牌和API接口
825. 清除成功
826. 验证令牌和API接口已清除\n需要重新验证才能下载
827. 清除失败
828. 清除失败: {str(e)}
829. 更新验证状态显示
830. verification_status_label
831. 状态: {status_text}
832. 显示API管理对话框
833. API管理
834. 600x500
835. 当前API状态
836. batch_config
837. enabled
838. 保存的API信息
839. 保存的API信息: 可用
840. 保存的API信息: 无
841. 操作按钮框架
842. 没有保存的API配置
843. 确定要清除保存的API配置吗？
844. 已清除保存的API配置
845. api_backup_{int(time.time())}.json
846. timestamp
847. API配置已导出到: {filename}
848. 导出失败: {str(e)}
849. 当前没有可导出的API配置
850. 刷新API
851. 🔄 刷新API
852. 应用保存的API
853. 📥 应用保存的API
854. 导出API
855. 📤 导出API配置
856. 清除保存的API
857. 🗑️ 清除保存的API
858. 检查API接口是否已获取
859. 已验证 ✓ (已获取{api_count}个API接口)
860. 已保存验证令牌但API接口未获取
861. 未验证 (需要进行验证码验证)
862. 在后台静默检查更新
863. 静默检查更新失败: {e}
864. 手动检查更新（带提示）
865. 检查更新
866. 当前已是最新版本
867. 检查更新失败
868. 弹窗提示用户更新
869. version
870. ?
871. 发现新版本 v{ver}，是否现在更新？
872. \n\n更新内容:\n{body[:800]}
873. 限制显示长度
874. 发现新版本
875. 开始更新（调用外部脚本处理所有更新操作）
876. 开始更新到版本: {update_info.get(
877. 开始更新到版本: {update_info.get('version', 'unknown')}
878. 创建外部更新脚本
879. 显示退出提示
880. 更新启动
881. 更新程序已启动，应用程序将关闭。\n
882. 更新完成后会自动重启程序。
883. 立即退出应用程序
884. 启动外部更新程序失败: {e}
885. 更新失败
886. 启动更新程序失败: {e}
887. 创建并启动外部更新脚本
888. 获取外部脚本路径
889. external_updater.py
890. 检查外部脚本是否存在
891. 外部更新脚本不存在: {external_script}
892. 将更新信息序列化为 JSON 字符串
893. 创建批处理脚本或 shell 脚本启动外部更新程序
894. Windows
895. Windows 批处理脚本
896. ', '\\
897. \\"
898. {script_dir}
899. {external_script}
900. {escaped_json}
901. start_update.bat
902. gbk
903. 启动批处理脚本（脱离控制台）
904. cmd
905. /c
906. Unix shell 脚本
907. !/bin/bash
908. {update_info_json}
909. start_update.sh
910. 启动 shell 脚本
911. 外部更新脚本已启动
912. 创建外部更新脚本失败: {e}
913. 获取当前程序目录和可执行文件路径
914. frozen
915. {exe_name}.backup
916. backup
917. 清理单个备份文件
918. 已清理残留的备份文件
919. 清理备份文件失败: {e}
920. 清理备份目录
921. 检查目录是否为空
922. 已清理空的备份目录
923. 如果目录不为空，尝试删除其中的备份文件
924. .backup
925. 再次检查是否为空
926. 已清理备份目录
927. 清理备份目录失败: {e}
928. 清理备份文件时出错: {e}
929. 检查上次更新的状态
930. log_exists
931. update_success
932. last_update_time
933. 上次更新成功完成于: {status[
934. 上次更新成功完成于: {status['last_update_time']}
935. error_message
936. 上次更新失败: {status[
937. 上次更新失败: {status['error_message']}
938. 可以在这里添加用户友好的提示
939. 在GUI完全加载后显示更新失败提示
940. 更新状态
941. 检测到上次更新可能失败: {status[
942. 检测到上次更新可能失败: {status['error_message']}\n
943. 建议重新运行更新或检查程序完整性。
944. 检测到更新日志，但无法确定更新状态
945. 检查更新状态失败: {e}
946. 处理更新过程中的事件回调（外部脚本处理，不需要GUI响应）
947. 由于更新现在由外部脚本完全处理，GUI不再需要响应这些事件
948. 只记录日志即可
949. download_error
950. install_error
951. 更新事件: {event} - {data}
952. 主程序入口
953. __main__
